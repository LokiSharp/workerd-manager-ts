// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file wokerd.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message Worker
 */
export class Worker extends Message<Worker> {
    /**
     * Unique id of the worker
     *
     * @generated from field: string UID = 1;
     */
    UID = "";

    /**
     * External path of the worker, default is '/'
     *
     * @generated from field: string ExternalPath = 2;
     */
    ExternalPath = "";

    /**
     * the workerd runner host name, default is 'localhost'
     *
     * @generated from field: string HostName = 3;
     */
    HostName = "";

    /**
     * for future HA feature, default is 'default'
     *
     * @generated from field: string NodeName = 4;
     */
    NodeName = "";

    /**
     * worker's port, platfrom will obtain free port while init worker
     *
     * @generated from field: int32 Port = 5;
     */
    Port = 0;

    /**
     * worker's entry file, default is 'entry.js'
     *
     * @generated from field: string Entry = 6;
     */
    Entry = "";

    /**
     * worker's code
     *
     * @generated from field: bytes Code = 7;
     */
    Code = new Uint8Array(0);

    /**
     * worker's name, also use at worker routing, must be unique, default is UID
     *
     * @generated from field: string Name = 8;
     */
    Name = "";

    /**
     * worker's tunnel id
     *
     * @generated from field: string TunnelID = 9;
     */
    TunnelID = "";

    /**
     * worker's user id
     *
     * @generated from field: uint64 UserID = 10;
     */
    UserID = protoInt64.zero;

    /**
     * worker's template
     *
     * @generated from field: string Template = 11;
     */
    Template = "";

    constructor(data?: PartialMessage<Worker>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = "Worker";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: "UID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "ExternalPath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "HostName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "NodeName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "Port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 6, name: "Entry", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "Code", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 8, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 9, name: "TunnelID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 10, name: "UserID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 11, name: "Template", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Worker {
        return new Worker().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Worker {
        return new Worker().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Worker {
        return new Worker().fromJsonString(jsonString, options);
    }

    static equals(a: Worker | PlainMessage<Worker> | undefined, b: Worker | PlainMessage<Worker> | undefined): boolean {
        return proto3.util.equals(Worker, a, b);
    }
}

/**
 * @generated from message WorkerList
 */
export class WorkerList extends Message<WorkerList> {
    /**
     * the name of the workerd instance
     *
     * @generated from field: string ConfName = 1;
     */
    ConfName = "";

    /**
     * @generated from field: repeated Worker Workers = 2;
     */
    Workers: Worker[] = [];

    /**
     * workerd runner host name, for HA
     *
     * @generated from field: string NodeName = 3;
     */
    NodeName = "";

    constructor(data?: PartialMessage<WorkerList>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = "WorkerList";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: "ConfName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "Workers", kind: "message", T: Worker, repeated: true },
        { no: 3, name: "NodeName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkerList {
        return new WorkerList().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkerList {
        return new WorkerList().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkerList {
        return new WorkerList().fromJsonString(jsonString, options);
    }

    static equals(a: WorkerList | PlainMessage<WorkerList> | undefined, b: WorkerList | PlainMessage<WorkerList> | undefined): boolean {
        return proto3.util.equals(WorkerList, a, b);
    }
}

/**
 * @generated from message Node
 */
export class Node extends Message<Node> {
    /**
     * the name of the node
     *
     * @generated from field: string Name = 1;
     */
    Name = "";

    /**
     * the id of the node
     *
     * @generated from field: string UID = 2;
     */
    UID = "";

    constructor(data?: PartialMessage<Node>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = "Node";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "UID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node {
        return new Node().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node {
        return new Node().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node {
        return new Node().fromJsonString(jsonString, options);
    }

    static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean {
        return proto3.util.equals(Node, a, b);
    }
}

