// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file wokerd.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message Worker
 */
export class Worker extends Message<Worker> {
  /**
   * Unique id of the worker
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * External path of the worker, default is '/'
   *
   * @generated from field: string externalPath = 2;
   */
  externalPath = "";

  /**
   * the workerd runner host name, default is 'localhost'
   *
   * @generated from field: string hostName = 3;
   */
  hostName = "";

  /**
   * for future HA feature, default is 'default'
   *
   * @generated from field: string nodeName = 4;
   */
  nodeName = "";

  /**
   * worker's port, platfrom will obtain free port while init worker
   *
   * @generated from field: int32 port = 5;
   */
  port = 0;

  /**
   * worker's entry file, default is 'entry.js'
   *
   * @generated from field: string entry = 6;
   */
  entry = "";

  /**
   * worker's code
   *
   * @generated from field: string code = 7;
   */
  code = "";

  /**
   * worker's name, also use at worker routing, must be unique, default is UID
   *
   * @generated from field: string name = 8;
   */
  name = "";

  /**
   * worker's tunnel id
   *
   * @generated from field: string tunnelId = 9;
   */
  tunnelId = "";

  /**
   * worker's user id
   *
   * @generated from field: string userId = 10;
   */
  userId = "";

  /**
   * worker's template
   *
   * @generated from field: string template = 11;
   */
  template = "";

  constructor(data?: PartialMessage<Worker>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Worker";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "externalPath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "hostName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "nodeName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "entry", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "tunnelId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "template", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Worker {
    return new Worker().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Worker {
    return new Worker().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Worker {
    return new Worker().fromJsonString(jsonString, options);
  }

  static equals(a: Worker | PlainMessage<Worker> | undefined, b: Worker | PlainMessage<Worker> | undefined): boolean {
    return proto3.util.equals(Worker, a, b);
  }
}

/**
 * @generated from message WorkerList
 */
export class WorkerList extends Message<WorkerList> {
  /**
   * the name of the workerd instance
   *
   * @generated from field: string confName = 1;
   */
  confName = "";

  /**
   * @generated from field: repeated Worker workers = 2;
   */
  workers: Worker[] = [];

  /**
   * workerd runner host name, for HA
   *
   * @generated from field: string nodeName = 3;
   */
  nodeName = "";

  constructor(data?: PartialMessage<WorkerList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "WorkerList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "confName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workers", kind: "message", T: Worker, repeated: true },
    { no: 3, name: "nodeName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkerList {
    return new WorkerList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkerList {
    return new WorkerList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkerList {
    return new WorkerList().fromJsonString(jsonString, options);
  }

  static equals(a: WorkerList | PlainMessage<WorkerList> | undefined, b: WorkerList | PlainMessage<WorkerList> | undefined): boolean {
    return proto3.util.equals(WorkerList, a, b);
  }
}

/**
 * @generated from message Node
 */
export class Node extends Message<Node> {
  /**
   * the name of the node
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * the id of the node
   *
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<Node>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Node";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node {
    return new Node().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJsonString(jsonString, options);
  }

  static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean {
    return proto3.util.equals(Node, a, b);
  }
}

